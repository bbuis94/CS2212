/**
 * CS2212 
 * 6_TheWeather
 * 
 * GUIWindow.java
 * A program that fetches weather data based on the OpenWeatherMapAPI.
 * Contains all the data objects as attributes.
 * 
 * @author team6
 */

import java.awt.Dimension;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import java.sql.Time;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import static org.json.JSONObject.NULL;

/**
 * GUIWindow represents the main window that appears when invoked by main.
 * Contains all the data objects as attributes, along with their respective
 * variables.
 * @extends javax.swing.JFrame 
 */
public class GUIWindow extends javax.swing.JFrame {

    // Attributes
    private SimpleDateFormat timeFormat;
    private String location;
    private JSON jsonObj;               // Current data for London,Ca

    private Time currentTime;           // Last updated time
    private boolean isValid;            // Represents if a query is valid or not

    // Data structures for each panel
    private Current currentObj;
    private ShortTerm weatherST;
    private LongTerm weatherLT;
    private Mars mars;

    private UserPreferences preferences;

    /**
     * Creates new form GUIWindow that represents the container for information
     */
    public GUIWindow() {
        timeFormat = new SimpleDateFormat("h:mm:ss a"); // Hour:Min:Sec: AM/PM
        currentTime = new Time(System.currentTimeMillis());
        location = "London, Ca";    // Default Location
        jsonObj = new JSON(location);
        isValid = false;

        currentObj = new Current();
        weatherST = new ShortTerm();
        weatherLT = new LongTerm();
        mars = new Mars();
        preferences = new UserPreferences();

        initComponents();   // Sets the default fields for each weather panel
        invalidateData();   // Sets all fields to invalid and default text look
        initTabs();         // Sets the default size for tabs for Current, ST, LT, and Mars
        initIcons();        // Sets the default sunrise/sunset icons
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField3 = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jMenu2 = new javax.swing.JMenu();
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        preferencesCheckboxGroup = new javax.swing.ButtonGroup();
        GUIWindowPanel = new javax.swing.JPanel();
        locationTextField = new javax.swing.JTextField();
        LiveTimeLabel = new javax.swing.JLabel();
        CurrentlyViewingLocationLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        guiTabbedPanels = new javax.swing.JTabbedPane();
        currentPanel = new javax.swing.JPanel();
        currentLocation = new javax.swing.JLabel();
        skyStateIconC = new javax.swing.JLabel();
        temperatureHeader = new javax.swing.JLabel();
        minTempHeader = new javax.swing.JLabel();
        skyConditionField = new javax.swing.JLabel();
        windSpeedHeader = new javax.swing.JLabel();
        windSpeedField = new javax.swing.JLabel();
        airPressureHeader = new javax.swing.JLabel();
        humidityHeader = new javax.swing.JLabel();
        maxTempHeader = new javax.swing.JLabel();
        airPressureField = new javax.swing.JLabel();
        humidityField = new javax.swing.JLabel();
        windDirectionField = new javax.swing.JLabel();
        sunriseSunsetIconContainerPanel = new javax.swing.JPanel();
        sunriseLabel = new javax.swing.JLabel();
        sunsetLabel = new javax.swing.JLabel();
        sunriseField = new javax.swing.JLabel();
        sunsetField = new javax.swing.JLabel();
        lastUpdatedTimeLabel = new javax.swing.JLabel();
        shortTermPanel = new javax.swing.JPanel();
        currentLocationST = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jSeparator3 = new javax.swing.JSeparator();
        jSeparator4 = new javax.swing.JSeparator();
        jSeparator5 = new javax.swing.JSeparator();
        jSeparator6 = new javax.swing.JSeparator();
        jSeparator7 = new javax.swing.JSeparator();
        skyStateOne = new javax.swing.JLabel();
        skyStateTwo = new javax.swing.JLabel();
        skyStateThree = new javax.swing.JLabel();
        skyStateFour = new javax.swing.JLabel();
        skyStateFive = new javax.swing.JLabel();
        skyStateSix = new javax.swing.JLabel();
        skyStateSeven = new javax.swing.JLabel();
        skyStateEight = new javax.swing.JLabel();
        temperatureLabelOne = new javax.swing.JLabel();
        conditionLabelOne = new javax.swing.JLabel();
        conditionLabelTwo = new javax.swing.JLabel();
        conditionLabelThree = new javax.swing.JLabel();
        conditionLabelFour = new javax.swing.JLabel();
        conditionLabelFive = new javax.swing.JLabel();
        conditionLabelSix = new javax.swing.JLabel();
        conditionLabelSeven = new javax.swing.JLabel();
        conditionLabelEight = new javax.swing.JLabel();
        temperatureLabelTwo = new javax.swing.JLabel();
        temperatureLabelThree = new javax.swing.JLabel();
        temperatureLabelFour = new javax.swing.JLabel();
        temperatureLabelFive = new javax.swing.JLabel();
        temperatureLabelSix = new javax.swing.JLabel();
        temperatureLabelSeven = new javax.swing.JLabel();
        temperatureLabelEight = new javax.swing.JLabel();
        lastUpdatedTimeLabelST = new javax.swing.JLabel();
        shortTermTimeLabelOne = new javax.swing.JLabel();
        shortTermTimeLabelTwo = new javax.swing.JLabel();
        shortTermTimeLabelThree = new javax.swing.JLabel();
        shortTermTimeLabelFour = new javax.swing.JLabel();
        shortTermTimeLabelFive = new javax.swing.JLabel();
        shortTermTimeLabelSix = new javax.swing.JLabel();
        shortTermTimeLabelSeven = new javax.swing.JLabel();
        shortTermTimeLabelEight = new javax.swing.JLabel();
        longTermPanel = new javax.swing.JPanel();
        currentLocationLT = new javax.swing.JLabel();
        longTermSeperatorFour = new javax.swing.JSeparator();
        longTermSeperatorThree = new javax.swing.JSeparator();
        longTermSeperatorTwo = new javax.swing.JSeparator();
        longTermSeperatorOne = new javax.swing.JSeparator();
        longTermDateOne = new javax.swing.JLabel();
        longTermDateTwo = new javax.swing.JLabel();
        longTermDateThree = new javax.swing.JLabel();
        longTermDateFour = new javax.swing.JLabel();
        longTermDateFive = new javax.swing.JLabel();
        longTermSkyStateOne = new javax.swing.JLabel();
        longTermSkyStateTwo = new javax.swing.JLabel();
        longTermSkyStateThree = new javax.swing.JLabel();
        longTermSkyStateFour = new javax.swing.JLabel();
        longTermSkyStateFive = new javax.swing.JLabel();
        longTermTempOne = new javax.swing.JLabel();
        longTermTempTwo = new javax.swing.JLabel();
        longTermTempThree = new javax.swing.JLabel();
        longTermTempFour = new javax.swing.JLabel();
        longTermTempFive = new javax.swing.JLabel();
        longTermTempHighOne = new javax.swing.JLabel();
        longTermTempLowOne = new javax.swing.JLabel();
        longTermTempLowTwo = new javax.swing.JLabel();
        longTermTempHighTwo = new javax.swing.JLabel();
        longTermTempLowThree = new javax.swing.JLabel();
        longTermTempHighThree = new javax.swing.JLabel();
        longTermTempLowFour = new javax.swing.JLabel();
        longTermTempHighFour = new javax.swing.JLabel();
        longTermTempHighFive = new javax.swing.JLabel();
        longTermTempLowFive = new javax.swing.JLabel();
        longTermConditionOne = new javax.swing.JLabel();
        longTermConditionTwo = new javax.swing.JLabel();
        longTermConditionThree = new javax.swing.JLabel();
        longTermConditionFour = new javax.swing.JLabel();
        longTermConditionFive = new javax.swing.JLabel();
        lastUpdatedTimeLabelLT = new javax.swing.JLabel();
        marsPanel = new javax.swing.JPanel();
        currentLocationLT1 = new javax.swing.JLabel();
        marsSkyStateIcon = new javax.swing.JLabel();
        lastUpdatedTimeLabelMARS = new javax.swing.JLabel();
        windSpeedHeaderMARS = new javax.swing.JLabel();
        windSpeedFieldMARS = new javax.swing.JLabel();
        windDirectionFieldMARS = new javax.swing.JLabel();
        airPressureHeaderMARS = new javax.swing.JLabel();
        airPressureFieldMARS = new javax.swing.JLabel();
        humidityHeaderMARS = new javax.swing.JLabel();
        humidityFieldMARS = new javax.swing.JLabel();
        maxTempHeaderMars = new javax.swing.JLabel();
        minTempHeaderMars = new javax.swing.JLabel();
        currentLocationLabel = new javax.swing.JLabel();
        searchPromptLabel = new javax.swing.JLabel();
        MenuPreferences = new javax.swing.JMenuBar();
        preferencesMenu = new javax.swing.JMenu();
        preferencesMetricCheckbox = new javax.swing.JCheckBoxMenuItem();
        preferencesImperialCheckbox = new javax.swing.JCheckBoxMenuItem();
        preferencesSICheckbox = new javax.swing.JCheckBoxMenuItem();

        jTextField1.setText("jTextField1");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField3.setText("jTextField3");

        jPanel3.setBackground(new java.awt.Color(192, 241, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("6_TheWeather");
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(1024, 640));
        setMinimumSize(new java.awt.Dimension(1024, 640));
        setName("guiFrame"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 640));
        setResizable(false);

        GUIWindowPanel.setBackground(new java.awt.Color(32, 32, 32));
        GUIWindowPanel.setForeground(new java.awt.Color(255, 255, 255));
        GUIWindowPanel.setFocusable(false);
        GUIWindowPanel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        GUIWindowPanel.setMaximumSize(new java.awt.Dimension(1024, 576));
        GUIWindowPanel.setMinimumSize(new java.awt.Dimension(1024, 576));
        GUIWindowPanel.setPreferredSize(new java.awt.Dimension(1024, 576));

        locationTextField.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        locationTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        locationTextField.setText("London, Ca");
        locationTextField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        locationTextField.setMinimumSize(new java.awt.Dimension(82, 20));
        locationTextField.setColumns(30);
        locationTextField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationTextFieldMouseClicked(evt);
            }
        });
        locationTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationTextFieldActionPerformed(evt);
            }
        });
        locationTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                locationTextFieldFocusGained(evt);
            }
        });

        Calendar now = Calendar.getInstance();
        LiveTimeLabel = new JLabel (timeFormat.format(now.getTime()));

        new Timer (1000, new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    Calendar now = Calendar.getInstance();
                    LiveTimeLabel.setText(timeFormat.format(now.getTime()));
                }
            }).start();
            LiveTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
            LiveTimeLabel.setForeground(new java.awt.Color(255, 255, 255));

            CurrentlyViewingLocationLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
            CurrentlyViewingLocationLabel.setForeground(new java.awt.Color(255, 255, 255));
            CurrentlyViewingLocationLabel.setText("Currently Viewing Weather For:");

            refreshButton.setText("jButton1");
            refreshButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 19, 1, 1));
            refreshButton.setContentAreaFilled(false);
            refreshButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            refreshButton.setMargin(new java.awt.Insets(2, 20, 2, 2));
            refreshButton.setMaximumSize(new java.awt.Dimension(24, 24));
            refreshButton.setMinimumSize(new java.awt.Dimension(24, 24));
            refreshButton.setPreferredSize(new java.awt.Dimension(24, 24));
            refreshButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/view_refresh_rotated.png"))); // NOI18N
            initRefreshButton();
            refreshButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    refreshButtonActionPerformed(evt);
                }
            });

            guiTabbedPanels.setBackground(new java.awt.Color(225, 225, 225));
            guiTabbedPanels.setForeground(new java.awt.Color(0, 0, 0));
            guiTabbedPanels.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
            guiTabbedPanels.setTabPlacement(javax.swing.JTabbedPane.LEFT);
            guiTabbedPanels.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            guiTabbedPanels.setDoubleBuffered(true);
            guiTabbedPanels.setMaximumSize(new java.awt.Dimension(960, 480));
            guiTabbedPanels.setMinimumSize(new java.awt.Dimension(960, 480));
            guiTabbedPanels.setPreferredSize(new java.awt.Dimension(960, 480));
            guiTabbedPanels.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    guiTabbedPanelsMouseClicked(evt);
                }
            });

            currentPanel.setBackground(new java.awt.Color(225, 225, 225));
            currentPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            currentPanel.setMaximumSize(new java.awt.Dimension(860, 472));
            currentPanel.setMinimumSize(new java.awt.Dimension(860, 472));
            currentPanel.setPreferredSize(new java.awt.Dimension(860, 472));

            currentLocation.setFont(new java.awt.Font("Ubuntu", 0, 45)); // NOI18N
            currentLocation.setText("Location");
            currentLocation.setMaximumSize(new java.awt.Dimension(400, 52));
            currentLocation.setMinimumSize(new java.awt.Dimension(400, 52));
            currentLocation.setPreferredSize(new java.awt.Dimension(400, 52));

            skyStateIconC.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            skyStateIconC.setVerticalAlignment(javax.swing.SwingConstants.TOP);
            skyStateIconC.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateIconC.setDoubleBuffered(true);
            skyStateIconC.setMaximumSize(new java.awt.Dimension(140, 140));
            skyStateIconC.setMinimumSize(new java.awt.Dimension(140, 140));
            skyStateIconC.setPreferredSize(new java.awt.Dimension(140, 140));

            temperatureHeader.setFont(new java.awt.Font("Ubuntu", 0, 48)); // NOI18N
            temperatureHeader.setText("\"\"");
            temperatureHeader.setBorder(null);
            temperatureHeader.setMaximumSize(new java.awt.Dimension(176, 58));
            temperatureHeader.setMinimumSize(new java.awt.Dimension(176, 58));
            temperatureHeader.setPreferredSize(new java.awt.Dimension(176, 58));

            minTempHeader.setText("Min(Low):");
            minTempHeader.setBorder(null);
            minTempHeader.setMaximumSize(new java.awt.Dimension(200, 18));
            minTempHeader.setMinimumSize(new java.awt.Dimension(200, 18));
            minTempHeader.setPreferredSize(new java.awt.Dimension(200, 18));

            skyConditionField.setText("\"Condition\"");
            skyConditionField.setBorder(null);
            skyConditionField.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

            windSpeedHeader.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            windSpeedHeader.setText("WindSpeed");

            windSpeedField.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            windSpeedField.setText("- m/s");

            airPressureHeader.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            airPressureHeader.setText("Air Pressure");

            humidityHeader.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            humidityHeader.setText("Humidity");

            maxTempHeader.setText("Max(High):");
            maxTempHeader.setBorder(null);
            maxTempHeader.setMaximumSize(new java.awt.Dimension(200, 18));
            maxTempHeader.setMinimumSize(new java.awt.Dimension(200, 18));
            maxTempHeader.setPreferredSize(new java.awt.Dimension(200, 18));

            airPressureField.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            airPressureField.setText("- kPa");

            humidityField.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            humidityField.setText("- %");

            windDirectionField.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            windDirectionField.setText("Direction");
            windDirectionField.setMaximumSize(new java.awt.Dimension(175, 24));
            windDirectionField.setMinimumSize(new java.awt.Dimension(150, 24));
            windDirectionField.setPreferredSize(new java.awt.Dimension(175, 24));

            sunriseSunsetIconContainerPanel.setBackground(new java.awt.Color(225, 225, 225));
            sunriseSunsetIconContainerPanel.setMaximumSize(new java.awt.Dimension(400, 150));

            sunriseLabel.setText("Sunrise");
            sunriseLabel.setMaximumSize(new java.awt.Dimension(130, 60));
            sunriseLabel.setMinimumSize(new java.awt.Dimension(130, 60));
            sunriseLabel.setPreferredSize(new java.awt.Dimension(130, 60));

            sunsetLabel.setText("Sunrise");
            sunsetLabel.setMaximumSize(new java.awt.Dimension(130, 60));
            sunsetLabel.setMinimumSize(new java.awt.Dimension(130, 60));
            sunsetLabel.setPreferredSize(new java.awt.Dimension(130, 60));

            sunriseField.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
            sunriseField.setText("\"Sunrise\"");

            sunsetField.setFont(new java.awt.Font("Ubuntu", 0, 15)); // NOI18N
            sunsetField.setText("\"Sunset\"");

            javax.swing.GroupLayout sunriseSunsetIconContainerPanelLayout = new javax.swing.GroupLayout(sunriseSunsetIconContainerPanel);
            sunriseSunsetIconContainerPanel.setLayout(sunriseSunsetIconContainerPanelLayout);
            sunriseSunsetIconContainerPanelLayout.setHorizontalGroup(
                sunriseSunsetIconContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(sunriseSunsetIconContainerPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addGroup(sunriseSunsetIconContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(sunriseSunsetIconContainerPanelLayout.createSequentialGroup()
                            .addComponent(sunsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sunsetField))
                        .addGroup(sunriseSunsetIconContainerPanelLayout.createSequentialGroup()
                            .addComponent(sunriseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(sunriseField)))
                    .addContainerGap(181, Short.MAX_VALUE))
            );
            sunriseSunsetIconContainerPanelLayout.setVerticalGroup(
                sunriseSunsetIconContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sunriseSunsetIconContainerPanelLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(sunriseSunsetIconContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sunriseLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sunriseField, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(sunriseSunsetIconContainerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sunsetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(sunsetField))
                    .addContainerGap())
            );

            lastUpdatedTimeLabel.setFont(new java.awt.Font("Ubuntu", 2, 10)); // NOI18N
            lastUpdatedTimeLabel.setForeground(new java.awt.Color(0, 0, 0));
            lastUpdatedTimeLabel.setText("Updated:   ");

            javax.swing.GroupLayout currentPanelLayout = new javax.swing.GroupLayout(currentPanel);
            currentPanel.setLayout(currentPanelLayout);
            currentPanelLayout.setHorizontalGroup(
                currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(currentPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(currentPanelLayout.createSequentialGroup()
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(skyConditionField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(skyStateIconC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(temperatureHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lastUpdatedTimeLabel)
                                .addComponent(maxTempHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(minTempHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(currentPanelLayout.createSequentialGroup()
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(windSpeedHeader)
                                .addGroup(currentPanelLayout.createSequentialGroup()
                                    .addComponent(windSpeedField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(windDirectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(49, 49, 49)
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(currentPanelLayout.createSequentialGroup()
                                    .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(airPressureHeader)
                                        .addComponent(airPressureField))
                                    .addGap(90, 90, 90)
                                    .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(humidityHeader)
                                        .addComponent(humidityField)))
                                .addComponent(sunriseSunsetIconContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(0, 113, Short.MAX_VALUE))
                        .addComponent(currentLocation, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            );
            currentPanelLayout.setVerticalGroup(
                currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(currentPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(currentLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(currentPanelLayout.createSequentialGroup()
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(currentPanelLayout.createSequentialGroup()
                                    .addComponent(lastUpdatedTimeLabel)
                                    .addGap(9, 9, 9)
                                    .addComponent(temperatureHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(maxTempHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(minTempHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(skyStateIconC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(skyConditionField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                            .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(currentPanelLayout.createSequentialGroup()
                                    .addComponent(windSpeedHeader)
                                    .addGap(18, 18, 18)
                                    .addGroup(currentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(windSpeedField)
                                        .addComponent(windDirectionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(currentPanelLayout.createSequentialGroup()
                                    .addComponent(humidityHeader)
                                    .addGap(18, 18, 18)
                                    .addComponent(humidityField))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentPanelLayout.createSequentialGroup()
                                    .addComponent(airPressureHeader)
                                    .addGap(18, 18, 18)
                                    .addComponent(airPressureField)))
                            .addGap(75, 75, 75))
                        .addGroup(currentPanelLayout.createSequentialGroup()
                            .addComponent(sunriseSunsetIconContainerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            );

            guiTabbedPanels.addTab("Current", null, currentPanel, "Displays the current weather information.");

            shortTermPanel.setBackground(new java.awt.Color(225, 225, 225));
            shortTermPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            shortTermPanel.setMaximumSize(new java.awt.Dimension(860, 472));
            shortTermPanel.setMinimumSize(new java.awt.Dimension(860, 472));
            shortTermPanel.setPreferredSize(new java.awt.Dimension(860, 472));

            currentLocationST.setFont(new java.awt.Font("Ubuntu", 0, 45)); // NOI18N
            currentLocationST.setText("Location");

            jSeparator1.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator1.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator1.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator1.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator2.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator2.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator2.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator2.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator3.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator3.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator3.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator3.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator4.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator4.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator4.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator4.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator5.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator5.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator5.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator5.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator6.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator6.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator6.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator6.setPreferredSize(new java.awt.Dimension(8, 350));

            jSeparator7.setForeground(new java.awt.Color(200, 200, 200));
            jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
            jSeparator7.setMaximumSize(new java.awt.Dimension(8, 350));
            jSeparator7.setMinimumSize(new java.awt.Dimension(8, 350));
            jSeparator7.setName(""); // NOI18N
            jSeparator7.setPreferredSize(new java.awt.Dimension(8, 350));

            skyStateOne.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateOne.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateOne.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateOne.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateTwo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateTwo.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateTwo.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateTwo.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateThree.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateThree.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateThree.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateThree.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateFour.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateFour.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateFour.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateFour.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateFive.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateFive.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateFive.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateFive.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateSix.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateSix.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateSix.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateSix.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateSeven.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateSeven.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateSeven.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateSeven.setPreferredSize(new java.awt.Dimension(50, 50));

            skyStateEight.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            skyStateEight.setMaximumSize(new java.awt.Dimension(50, 50));
            skyStateEight.setMinimumSize(new java.awt.Dimension(50, 50));
            skyStateEight.setPreferredSize(new java.awt.Dimension(50, 50));

            temperatureLabelOne.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelOne.setText("T:");

            conditionLabelOne.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelOne.setText("Con");

            conditionLabelTwo.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelTwo.setText("Con");

            conditionLabelThree.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelThree.setText("Con");

            conditionLabelFour.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelFour.setText("Con");

            conditionLabelFive.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelFive.setText("Con");

            conditionLabelSix.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelSix.setText("Con");

            conditionLabelSeven.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelSeven.setText("Con");

            conditionLabelEight.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            conditionLabelEight.setText("Con");

            temperatureLabelTwo.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelTwo.setText("T:");

            temperatureLabelThree.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelThree.setText("T:");

            temperatureLabelFour.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelFour.setText("T:");

            temperatureLabelFive.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelFive.setText("T:");

            temperatureLabelSix.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelSix.setText("T:");

            temperatureLabelSeven.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelSeven.setText("T:");

            temperatureLabelEight.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            temperatureLabelEight.setText("T:");

            lastUpdatedTimeLabelST.setFont(new java.awt.Font("Ubuntu", 2, 10)); // NOI18N
            lastUpdatedTimeLabelST.setForeground(new java.awt.Color(0, 0, 0));
            lastUpdatedTimeLabelST.setText("Updated:   ");

            shortTermTimeLabelOne.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelOne.setText("time");

            shortTermTimeLabelTwo.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelTwo.setText("time");

            shortTermTimeLabelThree.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelThree.setText("time");

            shortTermTimeLabelFour.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelFour.setText("time");

            shortTermTimeLabelFive.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelFive.setText("time");

            shortTermTimeLabelSix.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelSix.setText("time");

            shortTermTimeLabelSeven.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelSeven.setText("time");

            shortTermTimeLabelEight.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N
            shortTermTimeLabelEight.setText("time");

            javax.swing.GroupLayout shortTermPanelLayout = new javax.swing.GroupLayout(shortTermPanel);
            shortTermPanel.setLayout(shortTermPanelLayout);
            shortTermPanelLayout.setHorizontalGroup(
                shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(shortTermPanelLayout.createSequentialGroup()
                    .addGap(0, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(temperatureLabelOne)
                        .addComponent(conditionLabelOne)
                        .addComponent(shortTermTimeLabelOne))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelTwo)
                        .addComponent(temperatureLabelTwo)
                        .addComponent(shortTermTimeLabelTwo))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelThree)
                        .addComponent(temperatureLabelThree)
                        .addComponent(shortTermTimeLabelThree))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelFour)
                        .addComponent(temperatureLabelFour)
                        .addComponent(shortTermTimeLabelFour))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateFive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelFive)
                        .addComponent(temperatureLabelFive)
                        .addComponent(shortTermTimeLabelFive))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateSix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelSix)
                        .addComponent(temperatureLabelSix)
                        .addComponent(shortTermTimeLabelSix))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateSeven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelSeven)
                        .addComponent(temperatureLabelSeven)
                        .addComponent(shortTermTimeLabelSeven))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(skyStateEight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(conditionLabelEight)
                        .addComponent(temperatureLabelEight)
                        .addComponent(shortTermTimeLabelEight))
                    .addContainerGap(27, Short.MAX_VALUE))
                .addGroup(shortTermPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(currentLocationST, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(shortTermPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lastUpdatedTimeLabelST)
                    .addGap(0, 0, Short.MAX_VALUE))
            );
            shortTermPanelLayout.setVerticalGroup(
                shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(shortTermPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(currentLocationST)
                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                            .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(shortTermPanelLayout.createSequentialGroup()
                                    .addGap(44, 44, 44)
                                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(shortTermPanelLayout.createSequentialGroup()
                                    .addGap(6, 6, 6)
                                    .addComponent(lastUpdatedTimeLabelST)
                                    .addGroup(shortTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(64, 64, 64)
                                            .addComponent(shortTermTimeLabelOne)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelOne)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelOne))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelTwo)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelTwo)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelTwo))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelThree)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelThree)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelThree))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelFour)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelFour)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelFour))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelFive)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateFive, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelFive)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelFive))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelSix)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateSix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelSix)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelSix))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelSeven)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateSeven, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelSeven)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelSeven))
                                        .addGroup(shortTermPanelLayout.createSequentialGroup()
                                            .addGap(65, 65, 65)
                                            .addComponent(shortTermTimeLabelEight)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(skyStateEight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(conditionLabelEight)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(temperatureLabelEight)))))
                            .addGap(0, 0, Short.MAX_VALUE))))
            );

            guiTabbedPanels.addTab("Short Term", shortTermPanel);

            longTermPanel.setBackground(new java.awt.Color(225, 225, 225));
            longTermPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermPanel.setMaximumSize(new java.awt.Dimension(860, 472));
            longTermPanel.setMinimumSize(new java.awt.Dimension(860, 472));
            longTermPanel.setPreferredSize(new java.awt.Dimension(860, 472));

            currentLocationLT.setFont(new java.awt.Font("Ubuntu", 0, 45)); // NOI18N
            currentLocationLT.setText("Location");

            longTermSeperatorFour.setForeground(new java.awt.Color(200, 200, 200));
            longTermSeperatorFour.setOrientation(javax.swing.SwingConstants.VERTICAL);
            longTermSeperatorFour.setMaximumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorFour.setMinimumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorFour.setPreferredSize(new java.awt.Dimension(8, 350));

            longTermSeperatorThree.setForeground(new java.awt.Color(200, 200, 200));
            longTermSeperatorThree.setOrientation(javax.swing.SwingConstants.VERTICAL);
            longTermSeperatorThree.setMaximumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorThree.setMinimumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorThree.setPreferredSize(new java.awt.Dimension(8, 350));

            longTermSeperatorTwo.setForeground(new java.awt.Color(200, 200, 200));
            longTermSeperatorTwo.setOrientation(javax.swing.SwingConstants.VERTICAL);
            longTermSeperatorTwo.setMaximumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorTwo.setMinimumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorTwo.setPreferredSize(new java.awt.Dimension(8, 350));

            longTermSeperatorOne.setForeground(new java.awt.Color(200, 200, 200));
            longTermSeperatorOne.setOrientation(javax.swing.SwingConstants.VERTICAL);
            longTermSeperatorOne.setMaximumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorOne.setMinimumSize(new java.awt.Dimension(8, 350));
            longTermSeperatorOne.setPreferredSize(new java.awt.Dimension(8, 350));

            longTermDateOne.setText("Date");

            longTermDateTwo.setText("Date");

            longTermDateThree.setText("Date");

            longTermDateFour.setText("Date");

            longTermDateFive.setText("Date");

            longTermSkyStateOne.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermSkyStateOne.setMaximumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateOne.setMinimumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateOne.setPreferredSize(new java.awt.Dimension(140, 140));

            longTermSkyStateTwo.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermSkyStateTwo.setMaximumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateTwo.setMinimumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateTwo.setPreferredSize(new java.awt.Dimension(140, 140));

            longTermSkyStateThree.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermSkyStateThree.setMaximumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateThree.setMinimumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateThree.setPreferredSize(new java.awt.Dimension(140, 140));

            longTermSkyStateFour.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermSkyStateFour.setMaximumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateFour.setMinimumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateFour.setPreferredSize(new java.awt.Dimension(140, 140));

            longTermSkyStateFive.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
            longTermSkyStateFive.setMaximumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateFive.setMinimumSize(new java.awt.Dimension(140, 140));
            longTermSkyStateFive.setPreferredSize(new java.awt.Dimension(140, 140));

            longTermTempOne.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            longTermTempOne.setText("Temp:");

            longTermTempTwo.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            longTermTempTwo.setText("Temp:");

            longTermTempThree.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            longTermTempThree.setText("Temp:");

            longTermTempFour.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            longTermTempFour.setText("Temp:");

            longTermTempFive.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            longTermTempFive.setText("Temp:");

            longTermTempHighOne.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempHighOne.setText("High:");

            longTermTempLowOne.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempLowOne.setText("Low:");

            longTermTempLowTwo.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempLowTwo.setText("Low:");

            longTermTempHighTwo.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempHighTwo.setText("High:");

            longTermTempLowThree.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempLowThree.setText("Low:");

            longTermTempHighThree.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempHighThree.setText("High:");

            longTermTempLowFour.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempLowFour.setText("Low:");

            longTermTempHighFour.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempHighFour.setText("High:");

            longTermTempHighFive.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempHighFive.setText("High:");

            longTermTempLowFive.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
            longTermTempLowFive.setText("Low");

            longTermConditionOne.setText("Condition");

            longTermConditionTwo.setText("Condition");

            longTermConditionThree.setText("Condition");

            longTermConditionFour.setText("Condition");

            longTermConditionFive.setText("Condition");

            lastUpdatedTimeLabelLT.setFont(new java.awt.Font("Ubuntu", 2, 10)); // NOI18N
            lastUpdatedTimeLabelLT.setForeground(new java.awt.Color(0, 0, 0));
            lastUpdatedTimeLabelLT.setText("Updated:   ");

            javax.swing.GroupLayout longTermPanelLayout = new javax.swing.GroupLayout(longTermPanel);
            longTermPanel.setLayout(longTermPanelLayout);
            longTermPanelLayout.setHorizontalGroup(
                longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(longTermPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, longTermPanelLayout.createSequentialGroup()
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longTermDateOne)
                                .addComponent(longTermSkyStateOne, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermTempOne)
                                .addComponent(longTermTempHighOne)
                                .addComponent(longTermTempLowOne)
                                .addComponent(longTermConditionOne))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(longTermSeperatorOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longTermDateTwo)
                                .addComponent(longTermSkyStateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermTempTwo)
                                .addComponent(longTermTempLowTwo)
                                .addComponent(longTermTempHighTwo)
                                .addComponent(longTermConditionTwo))
                            .addGap(13, 13, 13)
                            .addComponent(longTermSeperatorTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longTermDateThree)
                                .addComponent(longTermSkyStateThree, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermTempThree)
                                .addComponent(longTermTempLowThree)
                                .addComponent(longTermTempHighThree)
                                .addComponent(longTermConditionThree))
                            .addGap(13, 13, 13)
                            .addComponent(longTermSeperatorThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longTermDateFour)
                                .addComponent(longTermSkyStateFour, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermTempFour)
                                .addComponent(longTermTempLowFour)
                                .addComponent(longTermTempHighFour)
                                .addComponent(longTermConditionFour))
                            .addGap(13, 13, 13)
                            .addComponent(longTermSeperatorFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(longTermDateFive)
                                .addComponent(longTermSkyStateFive, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermTempFive)
                                .addComponent(longTermTempHighFive)
                                .addComponent(longTermTempLowFive)
                                .addComponent(longTermConditionFive))
                            .addGap(15, 15, 15))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addComponent(lastUpdatedTimeLabelLT)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addComponent(currentLocationLT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            );
            longTermPanelLayout.setVerticalGroup(
                longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(longTermPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(currentLocationLT)
                    .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(longTermSeperatorFour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lastUpdatedTimeLabelLT)
                            .addGap(38, 38, 38)
                            .addComponent(longTermDateOne)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longTermSkyStateOne, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermConditionOne)
                            .addGap(2, 2, 2)
                            .addComponent(longTermTempOne)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempHighOne)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempLowOne))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(longTermDateThree)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longTermSkyStateThree, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermConditionThree)
                            .addGap(2, 2, 2)
                            .addComponent(longTermTempThree)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempHighThree)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempLowThree))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(longTermDateFour)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longTermSkyStateFour, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermConditionFour)
                            .addGap(2, 2, 2)
                            .addComponent(longTermTempFour)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempHighFour)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempLowFour))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(longTermDateFive)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longTermSkyStateFive, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermConditionFive)
                            .addGap(2, 2, 2)
                            .addComponent(longTermTempFive)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempHighFive)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempLowFive))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addGap(44, 44, 44)
                            .addGroup(longTermPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(longTermSeperatorTwo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermSeperatorThree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(longTermSeperatorOne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(longTermPanelLayout.createSequentialGroup()
                            .addGap(57, 57, 57)
                            .addComponent(longTermDateTwo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(longTermSkyStateTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermConditionTwo)
                            .addGap(2, 2, 2)
                            .addComponent(longTermTempTwo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempHighTwo)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(longTermTempLowTwo)))
                    .addGap(0, 0, Short.MAX_VALUE))
            );

            guiTabbedPanels.addTab("Long Term", longTermPanel);

            marsPanel.setBackground(new java.awt.Color(253, 143, 0));
            marsPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

            currentLocationLT1.setFont(new java.awt.Font("gargi", 1, 45)); // NOI18N
            currentLocationLT1.setForeground(new java.awt.Color(0, 0, 0));
            currentLocationLT1.setText("MARS");

            marsSkyStateIcon.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

            lastUpdatedTimeLabelMARS.setFont(new java.awt.Font("Ubuntu", 2, 10)); // NOI18N
            lastUpdatedTimeLabelMARS.setForeground(new java.awt.Color(0, 0, 0));
            lastUpdatedTimeLabelMARS.setText("Updated:   ");

            windSpeedHeaderMARS.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            windSpeedHeaderMARS.setText("WindSpeed");

            windSpeedFieldMARS.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            windSpeedFieldMARS.setText("- m/s");

            windDirectionFieldMARS.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            windDirectionFieldMARS.setText("Direction");
            windDirectionFieldMARS.setMaximumSize(new java.awt.Dimension(175, 24));
            windDirectionFieldMARS.setMinimumSize(new java.awt.Dimension(150, 24));
            windDirectionFieldMARS.setPreferredSize(new java.awt.Dimension(175, 24));

            airPressureHeaderMARS.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            airPressureHeaderMARS.setText("Air Pressure");

            airPressureFieldMARS.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            airPressureFieldMARS.setText("- kPa");

            humidityHeaderMARS.setFont(new java.awt.Font("Ubuntu", 0, 25)); // NOI18N
            humidityHeaderMARS.setText("Humidity");

            humidityFieldMARS.setFont(new java.awt.Font("Ubuntu", 0, 20)); // NOI18N
            humidityFieldMARS.setText("- %");

            maxTempHeaderMars.setFont(new java.awt.Font("Ubuntu", 0, 30)); // NOI18N
            maxTempHeaderMars.setText("Max(High):");
            maxTempHeaderMars.setBorder(null);
            maxTempHeaderMars.setMaximumSize(new java.awt.Dimension(200, 18));
            maxTempHeaderMars.setMinimumSize(new java.awt.Dimension(200, 18));
            maxTempHeaderMars.setPreferredSize(new java.awt.Dimension(200, 18));

            minTempHeaderMars.setFont(new java.awt.Font("Ubuntu", 0, 30)); // NOI18N
            minTempHeaderMars.setText("Min(Low):");
            minTempHeaderMars.setBorder(null);
            minTempHeaderMars.setMaximumSize(new java.awt.Dimension(200, 18));
            minTempHeaderMars.setMinimumSize(new java.awt.Dimension(200, 18));
            minTempHeaderMars.setPreferredSize(new java.awt.Dimension(200, 18));

            javax.swing.GroupLayout marsPanelLayout = new javax.swing.GroupLayout(marsPanel);
            marsPanel.setLayout(marsPanelLayout);
            marsPanelLayout.setHorizontalGroup(
                marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(marsPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(marsPanelLayout.createSequentialGroup()
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(windSpeedHeaderMARS)
                                .addGroup(marsPanelLayout.createSequentialGroup()
                                    .addComponent(windSpeedFieldMARS, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(windDirectionFieldMARS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(52, 52, 52)
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(airPressureHeaderMARS)
                                .addComponent(airPressureFieldMARS))
                            .addGap(90, 90, 90)
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(humidityHeaderMARS)
                                .addComponent(humidityFieldMARS)))
                        .addGroup(marsPanelLayout.createSequentialGroup()
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(currentLocationLT1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                .addComponent(marsSkyStateIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(marsPanelLayout.createSequentialGroup()
                                    .addGap(8, 8, 8)
                                    .addComponent(lastUpdatedTimeLabelMARS))
                                .addGroup(marsPanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(maxTempHeaderMars, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE))
                                .addGroup(marsPanelLayout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(minTempHeaderMars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );
            marsPanelLayout.setVerticalGroup(
                marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, marsPanelLayout.createSequentialGroup()
                    .addGap(20, 20, 20)
                    .addComponent(currentLocationLT1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(marsPanelLayout.createSequentialGroup()
                            .addComponent(lastUpdatedTimeLabelMARS)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(maxTempHeaderMars, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(minTempHeaderMars, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(marsSkyStateIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                    .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(marsPanelLayout.createSequentialGroup()
                            .addComponent(windSpeedHeaderMARS)
                            .addGap(18, 18, 18)
                            .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(windSpeedFieldMARS)
                                .addComponent(windDirectionFieldMARS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(marsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(marsPanelLayout.createSequentialGroup()
                                .addComponent(humidityHeaderMARS)
                                .addGap(18, 18, 18)
                                .addComponent(humidityFieldMARS))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, marsPanelLayout.createSequentialGroup()
                                .addComponent(airPressureHeaderMARS)
                                .addGap(18, 18, 18)
                                .addComponent(airPressureFieldMARS))))
                    .addGap(75, 75, 75))
            );

            guiTabbedPanels.addTab("MARS", marsPanel);

            currentLocationLabel.setForeground(new java.awt.Color(255, 255, 255));
            currentLocationLabel.setText("             ");

            searchPromptLabel.setBackground(new java.awt.Color(255, 255, 255));
            searchPromptLabel.setForeground(new java.awt.Color(255, 255, 255));
            searchPromptLabel.setText("<- Press Enter to search");

            javax.swing.GroupLayout GUIWindowPanelLayout = new javax.swing.GroupLayout(GUIWindowPanel);
            GUIWindowPanel.setLayout(GUIWindowPanelLayout);
            GUIWindowPanelLayout.setHorizontalGroup(
                GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GUIWindowPanelLayout.createSequentialGroup()
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPromptLabel)
                    .addGap(328, 328, 328))
                .addGroup(GUIWindowPanelLayout.createSequentialGroup()
                    .addGap(29, 29, 29)
                    .addGroup(GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(GUIWindowPanelLayout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(guiTabbedPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GUIWindowPanelLayout.createSequentialGroup()
                                    .addComponent(LiveTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(10, 10, 10))))
                        .addGroup(GUIWindowPanelLayout.createSequentialGroup()
                            .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(2, 2, 2)
                            .addComponent(CurrentlyViewingLocationLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(currentLocationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE)))
                    .addGap(35, 35, 35))
            );
            GUIWindowPanelLayout.setVerticalGroup(
                GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(GUIWindowPanelLayout.createSequentialGroup()
                    .addGroup(GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchPromptLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(GUIWindowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(CurrentlyViewingLocationLabel)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(currentLocationLabel))
                    .addGap(0, 0, 0)
                    .addComponent(guiTabbedPanels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(LiveTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(48, Short.MAX_VALUE))
            );

            refreshButton.getAccessibleContext().setAccessibleName("RefreshButton");
            guiTabbedPanels.getAccessibleContext().setAccessibleName("");
            guiTabbedPanels.getAccessibleContext().setAccessibleDescription("");

            preferencesMenu.setText("Preferences");
            preferencesMenu.setContentAreaFilled(false);
            preferencesMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            preferencesMenu.setFont(new java.awt.Font("Ubuntu", 0, 14)); // NOI18N

            preferencesCheckboxGroup.add(preferencesMetricCheckbox);
            preferencesMetricCheckbox.setText("Metric");
            preferencesMetricCheckbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    preferencesMetricCheckboxActionPerformed(evt);
                }
            });
            preferencesMenu.add(preferencesMetricCheckbox);

            preferencesCheckboxGroup.add(preferencesImperialCheckbox);
            preferencesImperialCheckbox.setText("Imperial");
            preferencesImperialCheckbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    preferencesImperialCheckboxActionPerformed(evt);
                }
            });
            preferencesMenu.add(preferencesImperialCheckbox);

            preferencesCheckboxGroup.add(preferencesSICheckbox);
            preferencesSICheckbox.setText("S.I.");
            preferencesSICheckbox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    preferencesSICheckboxActionPerformed(evt);
                }
            });
            preferencesMenu.add(preferencesSICheckbox);

            MenuPreferences.add(preferencesMenu);

            setJMenuBar(MenuPreferences);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GUIWindowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(GUIWindowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
            );

            getAccessibleContext().setAccessibleName("GUIWindow");

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void locationTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_locationTextFieldFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTextFieldFocusGained

    /**
     * locationFieldActionPerformed sends a new json query Contains catch
     * statements to account for server and malformed query errors Detects if
     * the Enter key is pressed.
     *
     * @return void
     */
    private void locationTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationTextFieldActionPerformed
        Time temp = currentTime;
        currentTime = new Time(System.currentTimeMillis());
        if ((currentTime.getTime() - temp.getTime()) < 1400) {
            return; // Cannot query the server too fast.
        }
        try // Check if location exists
        {
            location = locationTextField.getText(); // Get query string

            if (!location.contains(",") | location.matches("[0-9]*\\d+.*")) {   // Primitive check to see if the location is valid.
                throw new Exception("Not a valid location.");
            }

            jsonObj = new JSON(location);
            jsonObj.updateCurrentWeatherData(); // Fetch json object for the location

            currentObj = jsonObj.updateCurrentWeatherData();
            weatherST = jsonObj.updateShortTermData();  // Attempt to Query short term
            weatherLT = jsonObj.updateLongTermData();   // Attempt to query long-term
            mars = jsonObj.updateMarsData();
            
            
            preferences.setUserPreferences(currentObj.getPreferences());

            updateCurrentTab();
            updateShortTermTab();
            updateLongTermTab();
            updateMarsTab();

            isValid = true;                             // Refresh flag is enabled- query is valid
            searchPromptLabel.setText("");

        } catch (InternalServerError ex) {
            promptQueryAgain();

        } catch (NoConnectionException ex) {
            notifyNoConnection();

        } catch (BadLocationException ex) {
            notifyBadLocation();

        } catch (Exception ex) {
            notifyBadLocation();
        }
    }//GEN-LAST:event_locationTextFieldActionPerformed

    /*
     * actionListener to select the text in the query bar
     */
    private void locationTextFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTextFieldMouseClicked
        locationTextField.requestFocusInWindow();
        locationTextField.selectAll();      // Highlight ALL text in LocationField
    }//GEN-LAST:event_locationTextFieldMouseClicked

    // Action listener for when the refresh icon is clicked
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed

        refreshApp();
    }//GEN-LAST:event_refreshButtonActionPerformed


    private void preferencesMetricCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesMetricCheckboxActionPerformed

        preferences.setUserPreferences("M");
        mars.serializePreferences("M");

        if (isValid) {
            currentObj.serializePreferences("M");
            for (int i = 0; i < 8; i++) {
                weatherST.getHourly(i).serializePreferences("M");
                if (i < 5) {
                    weatherLT.getDaily(i).serializePreferences("M");
                }
            }

            refreshData();   // Call refresh units here instead
        }
    }//GEN-LAST:event_preferencesMetricCheckboxActionPerformed

    private void preferencesImperialCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesImperialCheckboxActionPerformed

        preferences.setUserPreferences("I");
        mars.serializePreferences("T");

        if (isValid) {
            currentObj.serializePreferences("I");
            for (int i = 0; i < 8; i++) {
                weatherST.getHourly(i).serializePreferences("I");
                if (i < 5) {
                    weatherLT.getDaily(i).serializePreferences("I");
                }
            }

            refreshData();   // Call referesh units here instead
        }
    }//GEN-LAST:event_preferencesImperialCheckboxActionPerformed

    private void preferencesSICheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_preferencesSICheckboxActionPerformed

        preferences.setUserPreferences("S");
        mars.serializePreferences("S");

        if (isValid) {
            currentObj.serializePreferences("S");

            for (int i = 0; i < 8; i++) {
                weatherST.getHourly(i).serializePreferences("S");
                if (i < 5) {
                    weatherLT.getDaily(i).serializePreferences("S");
                }
            }

            refreshData();   // Call refresh units here instead
        }
    }//GEN-LAST:event_preferencesSICheckboxActionPerformed

    private void guiTabbedPanelsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_guiTabbedPanelsMouseClicked

        try {
            mars = jsonObj.updateMarsData();            // Fetch mars-data

            updateMarsTab();
        } catch (NoConnectionException ex) {
            notifyNoConnection();
        } catch (InternalServerError ex) {
            promptQueryAgain();
        } catch (BadLocationException ex) {
            notifyBadLocation();
        }
    }//GEN-LAST:event_guiTabbedPanelsMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
            ex.printStackTrace();
        } catch (InstantiationException ex) {
            System.out.println(ex);
            ex.printStackTrace();
        } catch (IllegalAccessException ex) {
            System.out.println(ex);
            ex.printStackTrace();
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            System.out.println(ex);
            ex.printStackTrace();
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CurrentlyViewingLocationLabel;
    private javax.swing.JPanel GUIWindowPanel;
    private javax.swing.JLabel LiveTimeLabel;
    private javax.swing.JMenuBar MenuPreferences;
    private javax.swing.JLabel airPressureField;
    private javax.swing.JLabel airPressureFieldMARS;
    private javax.swing.JLabel airPressureHeader;
    private javax.swing.JLabel airPressureHeaderMARS;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel conditionLabelEight;
    private javax.swing.JLabel conditionLabelFive;
    private javax.swing.JLabel conditionLabelFour;
    private javax.swing.JLabel conditionLabelOne;
    private javax.swing.JLabel conditionLabelSeven;
    private javax.swing.JLabel conditionLabelSix;
    private javax.swing.JLabel conditionLabelThree;
    private javax.swing.JLabel conditionLabelTwo;
    private javax.swing.JLabel currentLocation;
    private javax.swing.JLabel currentLocationLT;
    private javax.swing.JLabel currentLocationLT1;
    private javax.swing.JLabel currentLocationLabel;
    private javax.swing.JLabel currentLocationST;
    private javax.swing.JPanel currentPanel;
    private javax.swing.JTabbedPane guiTabbedPanels;
    private javax.swing.JLabel humidityField;
    private javax.swing.JLabel humidityFieldMARS;
    private javax.swing.JLabel humidityHeader;
    private javax.swing.JLabel humidityHeaderMARS;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lastUpdatedTimeLabel;
    private javax.swing.JLabel lastUpdatedTimeLabelLT;
    private javax.swing.JLabel lastUpdatedTimeLabelMARS;
    private javax.swing.JLabel lastUpdatedTimeLabelST;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JLabel longTermConditionFive;
    private javax.swing.JLabel longTermConditionFour;
    private javax.swing.JLabel longTermConditionOne;
    private javax.swing.JLabel longTermConditionThree;
    private javax.swing.JLabel longTermConditionTwo;
    private javax.swing.JLabel longTermDateFive;
    private javax.swing.JLabel longTermDateFour;
    private javax.swing.JLabel longTermDateOne;
    private javax.swing.JLabel longTermDateThree;
    private javax.swing.JLabel longTermDateTwo;
    private javax.swing.JPanel longTermPanel;
    private javax.swing.JSeparator longTermSeperatorFour;
    private javax.swing.JSeparator longTermSeperatorOne;
    private javax.swing.JSeparator longTermSeperatorThree;
    private javax.swing.JSeparator longTermSeperatorTwo;
    private javax.swing.JLabel longTermSkyStateFive;
    private javax.swing.JLabel longTermSkyStateFour;
    private javax.swing.JLabel longTermSkyStateOne;
    private javax.swing.JLabel longTermSkyStateThree;
    private javax.swing.JLabel longTermSkyStateTwo;
    private javax.swing.JLabel longTermTempFive;
    private javax.swing.JLabel longTermTempFour;
    private javax.swing.JLabel longTermTempHighFive;
    private javax.swing.JLabel longTermTempHighFour;
    private javax.swing.JLabel longTermTempHighOne;
    private javax.swing.JLabel longTermTempHighThree;
    private javax.swing.JLabel longTermTempHighTwo;
    private javax.swing.JLabel longTermTempLowFive;
    private javax.swing.JLabel longTermTempLowFour;
    private javax.swing.JLabel longTermTempLowOne;
    private javax.swing.JLabel longTermTempLowThree;
    private javax.swing.JLabel longTermTempLowTwo;
    private javax.swing.JLabel longTermTempOne;
    private javax.swing.JLabel longTermTempThree;
    private javax.swing.JLabel longTermTempTwo;
    private javax.swing.JPanel marsPanel;
    private javax.swing.JLabel marsSkyStateIcon;
    private javax.swing.JLabel maxTempHeader;
    private javax.swing.JLabel maxTempHeaderMars;
    private javax.swing.JLabel minTempHeader;
    private javax.swing.JLabel minTempHeaderMars;
    private javax.swing.ButtonGroup preferencesCheckboxGroup;
    private javax.swing.JCheckBoxMenuItem preferencesImperialCheckbox;
    private javax.swing.JMenu preferencesMenu;
    private javax.swing.JCheckBoxMenuItem preferencesMetricCheckbox;
    private javax.swing.JCheckBoxMenuItem preferencesSICheckbox;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel searchPromptLabel;
    private javax.swing.JPanel shortTermPanel;
    private javax.swing.JLabel shortTermTimeLabelEight;
    private javax.swing.JLabel shortTermTimeLabelFive;
    private javax.swing.JLabel shortTermTimeLabelFour;
    private javax.swing.JLabel shortTermTimeLabelOne;
    private javax.swing.JLabel shortTermTimeLabelSeven;
    private javax.swing.JLabel shortTermTimeLabelSix;
    private javax.swing.JLabel shortTermTimeLabelThree;
    private javax.swing.JLabel shortTermTimeLabelTwo;
    private javax.swing.JLabel skyConditionField;
    private javax.swing.JLabel skyStateEight;
    private javax.swing.JLabel skyStateFive;
    private javax.swing.JLabel skyStateFour;
    private javax.swing.JLabel skyStateIconC;
    private javax.swing.JLabel skyStateOne;
    private javax.swing.JLabel skyStateSeven;
    private javax.swing.JLabel skyStateSix;
    private javax.swing.JLabel skyStateThree;
    private javax.swing.JLabel skyStateTwo;
    private javax.swing.JLabel sunriseField;
    private javax.swing.JLabel sunriseLabel;
    private javax.swing.JPanel sunriseSunsetIconContainerPanel;
    private javax.swing.JLabel sunsetField;
    private javax.swing.JLabel sunsetLabel;
    private javax.swing.JLabel temperatureHeader;
    private javax.swing.JLabel temperatureLabelEight;
    private javax.swing.JLabel temperatureLabelFive;
    private javax.swing.JLabel temperatureLabelFour;
    private javax.swing.JLabel temperatureLabelOne;
    private javax.swing.JLabel temperatureLabelSeven;
    private javax.swing.JLabel temperatureLabelSix;
    private javax.swing.JLabel temperatureLabelThree;
    private javax.swing.JLabel temperatureLabelTwo;
    private javax.swing.JLabel windDirectionField;
    private javax.swing.JLabel windDirectionFieldMARS;
    private javax.swing.JLabel windSpeedField;
    private javax.swing.JLabel windSpeedFieldMARS;
    private javax.swing.JLabel windSpeedHeader;
    private javax.swing.JLabel windSpeedHeaderMARS;
    // End of variables declaration//GEN-END:variables

    /**
     * initRefreshButton() updates the refresh icon with a new icon used for
     * animation of refresh icon
     *
     * @return void
     */
    private void initRefreshButton() {
        ImageIcon icon = new ImageIcon(GUIWindow.class.getResource("view_refresh.png"));
        refreshButton.setIcon(icon);
    }

    /**
     * initIcons draws the sunrise and sunset icons
     *
     * @return void
     */
    private void initIcons() {
        ImageIcon sunrise = new ImageIcon(GUIWindow.class.getResource("sunriseW.png"));
        sunriseLabel.setIcon(sunrise);

        ImageIcon sunset = new ImageIcon(GUIWindow.class.getResource("sunset.png"));
        sunsetLabel.setIcon(sunset);

    }

    /**
     * showShowCurrentData shows the Current Term data in the currentTab
     * Displays the values of the fields.
     *
     * @return void
     */
    private void showCurrentData() {
        currentLocation.setText(location);
        temperatureHeader.setText(String.valueOf(currentObj.getTemperature()) + preferences.getTemperatureUnit());
        windSpeedField.setText(String.valueOf(currentObj.getWindSpeed()) + preferences.getSpeedUni());
        windDirectionField.setText(currentObj.getWindDirection());
        airPressureField.setText(String.valueOf(currentObj.getAirPressure()) + preferences.getPressureUnit());
        humidityField.setText(String.valueOf(currentObj.getHumidity()) + "%");
        skyConditionField.setText(currentObj.getSkyCondition());
        maxTempHeader.setText(String.valueOf("Max(High): " + currentObj.getMaxTemp()) + preferences.getTemperatureUnit());
        minTempHeader.setText(String.valueOf("Min(Low): " + currentObj.getMinTemp()) + preferences.getTemperatureUnit());

        ImageIcon skyState = currentObj.getCondition();
        skyStateIconC.setIcon(currentObj.getCondition());

        try {
            URL url = new URL(currentObj.getCondition().toString()); //Resize image icon based on URL
            Image img = ImageIO.read(url);
            Image resizedSkyState = img.getScaledInstance(140, 140, 0);
            skyStateIconC.setIcon(new ImageIcon(resizedSkyState));

        } catch (MalformedURLException ex) {

            notifyNoConnection();

        } catch (IOException ex) {

            notifyNoConnection();

        }
        String[] amP = {"AM", "PM"};

        GregorianCalendar cal = currentObj.getSunRise();    // Create a sunrise calendar object
        int h = cal.get(GregorianCalendar.HOUR);            // Hour of sunset
        int m = cal.get(GregorianCalendar.MINUTE);          // Minute of sunset
        int amPm = cal.get(GregorianCalendar.AM_PM);        // Get AM or PM

        if (m / 10 == 0) // If the value returned is < 10 minutes, need to add 0 as a filler.
        {
            sunriseField.setText(String.valueOf(h) + ":0" + String.valueOf(m) + amP[amPm]);
        } else {
            sunriseField.setText(String.valueOf(h) + ":" + String.valueOf(m) + amP[amPm]);
        }

        cal = currentObj.getSunSet();
        h = cal.get(GregorianCalendar.HOUR);                // Create sunset calendar object
        m = cal.get(GregorianCalendar.MINUTE);              // Hour of sunset
        amPm = cal.get(GregorianCalendar.AM_PM);            // Munute of sunset
        sunsetField.setText(String.valueOf(h) + ":" + String.valueOf(m) + amP[amPm]);

        lastUpdatedTimeLabel.setText("Updated: " + String.valueOf(currentTime));    // Update time label
    }

    /**
     * updateCurrentTab is called by an action-listener and upates the current
     * weather view's information
     *
     * @return void
     */
    private void updateCurrentTab() {
        if (jsonObj != NULL) // In case the data hasn't been refreshed yet
        {

            try {
                currentObj = jsonObj.updateCurrentWeatherData();
            } catch (NoConnectionException ex) {
//                System.out.println(ex);
//                ex.printStackTrace();

                notifyNoConnection();
            } catch (InternalServerError ex) {
//                System.out.println(ex);
//                ex.printStackTrace();

                promptQueryAgain();
            } catch (BadLocationException ex) {
                notifyBadLocation();

            }

            showCurrentData();
        }
    }

    /**
     * showShortTermDAta shows the Short Term data in the shortTermTab Displays
     * the numbers.
     *
     * @return void
     */
    private void showShortTermData() {
        if (weatherST != null) {
            currentLocationST.setText(location);

            conditionLabelEight.setText(weatherST.getHourly(7).getSkyCondition());
            conditionLabelFive.setText(weatherST.getHourly(4).getSkyCondition());
            conditionLabelFour.setText(weatherST.getHourly(3).getSkyCondition());
            conditionLabelOne.setText(weatherST.getHourly(0).getSkyCondition());
            conditionLabelSeven.setText(weatherST.getHourly(6).getSkyCondition());
            conditionLabelSix.setText(weatherST.getHourly(5).getSkyCondition());
            conditionLabelThree.setText(weatherST.getHourly(2).getSkyCondition());
            conditionLabelTwo.setText(weatherST.getHourly(1).getSkyCondition());

            skyStateEight.setIcon(weatherST.getHourly(7).getCondition());
            skyStateFive.setIcon(weatherST.getHourly(4).getCondition());
            skyStateFour.setIcon(weatherST.getHourly(3).getCondition());
            skyStateOne.setIcon(weatherST.getHourly(0).getCondition());
            skyStateSeven.setIcon(weatherST.getHourly(6).getCondition());
            skyStateSix.setIcon(weatherST.getHourly(5).getCondition());
            skyStateThree.setIcon(weatherST.getHourly(2).getCondition());
            skyStateTwo.setIcon(weatherST.getHourly(1).getCondition());

            temperatureLabelEight.setText("T: " + weatherST.getHourly(7).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelFive.setText("T: " + weatherST.getHourly(4).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelFour.setText("T: " + weatherST.getHourly(3).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelOne.setText("T: " + weatherST.getHourly(0).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelSeven.setText("T: " + weatherST.getHourly(6).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelSix.setText("T: " + weatherST.getHourly(5).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelThree.setText("T: " + weatherST.getHourly(2).getTemperature() + preferences.getTemperatureUnit());
            temperatureLabelTwo.setText("T: " + weatherST.getHourly(1).getTemperature() + preferences.getTemperatureUnit());

            shortTermTimeLabelOne.setText(String.valueOf(weatherST.getHourly(0).getHour()) + ":00");
            shortTermTimeLabelTwo.setText(String.valueOf(weatherST.getHourly(1).getHour()) + ":00");
            shortTermTimeLabelThree.setText(String.valueOf(weatherST.getHourly(2).getHour()) + ":00");
            shortTermTimeLabelFour.setText(String.valueOf(weatherST.getHourly(3).getHour()) + ":00");
            shortTermTimeLabelFive.setText(String.valueOf(weatherST.getHourly(4).getHour()) + ":00");
            shortTermTimeLabelSix.setText(String.valueOf(weatherST.getHourly(5).getHour()) + ":00");
            shortTermTimeLabelSeven.setText(String.valueOf(weatherST.getHourly(6).getHour()) + ":00");
            shortTermTimeLabelEight.setText(String.valueOf(weatherST.getHourly(7).getHour()) + ":00");

            lastUpdatedTimeLabelST.setText("Updated: " + String.valueOf(currentTime));
        }
    }

    /**
     * updateShortTermTab refreshes the weather data in the Short Term Tab
     * Attempts to pull data from the server. Calls separate function to display
     * the data.
     *
     * @return void
     */
    private void updateShortTermTab() {

        try {
            weatherST = jsonObj.updateShortTermData();  // Update the data
        } catch (NoConnectionException ex) {

            notifyNoConnection();

        } catch (InternalServerError ex) {
            promptQueryAgain();

            promptQueryAgain();
        } catch (BadLocationException ex) {
            notifyBadLocation();
        }
        showShortTermData();
    }

    /**
     * showLongTermDAta shows the Long Term data in the longTermTab Displays the
     * numbers.
     *
     * @return void
     */
    private void showLongTermData() {
        longTermTempOne.setText(String.valueOf(weatherLT.getDaily(0).getTemperature()) + preferences.getTemperatureUnit());
        longTermTempTwo.setText(String.valueOf(weatherLT.getDaily(1).getTemperature()) + preferences.getTemperatureUnit());
        longTermTempThree.setText(String.valueOf(weatherLT.getDaily(2).getTemperature()) + preferences.getTemperatureUnit());
        longTermTempFour.setText(String.valueOf(weatherLT.getDaily(3).getTemperature()) + preferences.getTemperatureUnit());
        longTermTempFive.setText(String.valueOf(weatherLT.getDaily(4).getTemperature()) + preferences.getTemperatureUnit());

        // Sky State Condition
        longTermConditionOne.setText(weatherLT.getDaily(0).getSkyCondition());
        longTermConditionTwo.setText(weatherLT.getDaily(1).getSkyCondition());
        longTermConditionThree.setText(weatherLT.getDaily(2).getSkyCondition());
        longTermConditionFour.setText(weatherLT.getDaily(3).getSkyCondition());
        longTermConditionFive.setText(weatherLT.getDaily(4).getSkyCondition());

        // Icon resizing function
        try {
            URL url = new URL(weatherLT.getDaily(0).getCondition().toString());
            Image img = ImageIO.read(url);
            Image resizedSkyState = img.getScaledInstance(140, 140, 0);
            longTermSkyStateOne.setIcon(new ImageIcon(resizedSkyState));

            url = new URL(weatherLT.getDaily(1).getCondition().toString());
            img = ImageIO.read(url);
            resizedSkyState = img.getScaledInstance(140, 140, 0);
            longTermSkyStateTwo.setIcon(new ImageIcon(resizedSkyState));

            url = new URL(weatherLT.getDaily(2).getCondition().toString());
            img = ImageIO.read(url);
            resizedSkyState = img.getScaledInstance(140, 140, 0);
            longTermSkyStateThree.setIcon(new ImageIcon(resizedSkyState));

            url = new URL(weatherLT.getDaily(3).getCondition().toString());
            img = ImageIO.read(url);
            resizedSkyState = img.getScaledInstance(140, 140, 0);
            longTermSkyStateFour.setIcon(new ImageIcon(resizedSkyState));

            url = new URL(weatherLT.getDaily(4).getCondition().toString());
            img = ImageIO.read(url);
            resizedSkyState = img.getScaledInstance(140, 140, 0);
            longTermSkyStateFive.setIcon(new ImageIcon(resizedSkyState));
        } catch (MalformedURLException ex) {
            notifyNoConnection();

        } catch (IOException ex) {
            ex.printStackTrace();

        } catch (java.lang.NullPointerException ex) {

            updateLongTermTab();    // Exception comes from JSON- query again to elminate it
        }

        // Maximum Temp Updating
        longTermTempHighOne.setText(String.valueOf("H: " + weatherLT.getDaily(0).getMaxTemp()) + preferences.getTemperatureUnit());
        longTermTempHighTwo.setText(String.valueOf("H: " + weatherLT.getDaily(1).getMaxTemp()) + preferences.getTemperatureUnit());
        longTermTempHighThree.setText(String.valueOf("H: " + weatherLT.getDaily(2).getMaxTemp()) + preferences.getTemperatureUnit());
        longTermTempHighFour.setText(String.valueOf("H: " + weatherLT.getDaily(3).getMaxTemp()) + preferences.getTemperatureUnit());
        longTermTempHighFive.setText(String.valueOf("H: " + weatherLT.getDaily(4).getMaxTemp()) + preferences.getTemperatureUnit());

        // Minimum Temp Updating
        longTermTempLowOne.setText(String.valueOf("L: " + weatherLT.getDaily(0).getMinTemp()) + preferences.getTemperatureUnit());
        longTermTempLowTwo.setText(String.valueOf("L: " + weatherLT.getDaily(1).getMinTemp()) + preferences.getTemperatureUnit());
        longTermTempLowThree.setText(String.valueOf("L: " + weatherLT.getDaily(2).getMinTemp()) + preferences.getTemperatureUnit());
        longTermTempLowFour.setText(String.valueOf("L: " + weatherLT.getDaily(3).getMinTemp()) + preferences.getTemperatureUnit());
        longTermTempLowFive.setText(String.valueOf("L: " + weatherLT.getDaily(4).getMinTemp()) + preferences.getTemperatureUnit());

        // 24 Hour time updating
        longTermDateOne.setText(weatherLT.getDaily(0).getDay());
        longTermDateTwo.setText(weatherLT.getDaily(1).getDay());
        longTermDateThree.setText(weatherLT.getDaily(2).getDay());
        longTermDateFour.setText(weatherLT.getDaily(3).getDay());
        longTermDateFive.setText(weatherLT.getDaily(4).getDay());

        lastUpdatedTimeLabelLT.setText("Updated: " + String.valueOf(currentTime));
    }

    /**
     * updateLongTermTab refreshes the weather information in the Long Term Tab
     *
     * @return void
     */
    private void updateLongTermTab() {

        try {

            weatherLT = jsonObj.updateLongTermData();
            currentLocationLT.setText(location);    // Change the location display text
            showLongTermData();

        } catch (NoConnectionException ex) {

            notifyNoConnection();

        } catch (InternalServerError ex) {
            promptQueryAgain();

        } catch (java.lang.NullPointerException ex) {

            invalidateData();

        } catch (BadLocationException ex) {

            notifyBadLocation();
        }

    }

    /**
     * showMarsData updates the units and labels display on the marsTab
     * @return void
     */
    private void showMarsData() {
        lastUpdatedTimeLabelMARS.setText("Updated: " + String.valueOf(currentTime));
        windSpeedFieldMARS.setText(String.valueOf(mars.getWindSpeed()) + preferences.getSpeedUni());
        windDirectionFieldMARS.setText(mars.getWindDirection());
        humidityFieldMARS.setText(String.valueOf(mars.getHumidity()) + "%");
        airPressureFieldMARS.setText(String.valueOf(mars.getAirPressure()) + preferences.getPressureUnit());
        maxTempHeaderMars.setText("Max: " + String.valueOf(mars.getMaxTemp() + preferences.getTemperatureUnit()));
        minTempHeaderMars.setText("Min: " + String.valueOf(mars.getMinTemp() + preferences.getTemperatureUnit()));

        try {
            Image mC;
            if (mars.getSkyCondition() == null) {
                mC = ImageIO.read(GUIWindow.class.getResource("mars_cloudy.png"));
            } else {
                mC = ImageIO.read(GUIWindow.class.getResource("mars_sunny.png"));
            }
            Image resizedmC = mC.getScaledInstance(140, 140, 0);
            marsSkyStateIcon.setIcon(new ImageIcon(resizedmC));

        } catch (IOException ex) {
            Logger.getLogger(GUIWindow.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Could not load image.");
        }
    }

    /**
     * updateMarsTab refreshes the view on the MARS Rover panel, updating the
     * data
     *
     * @return void
     */
    private void updateMarsTab() {
        try {
            mars = jsonObj.updateMarsData();
        } catch (NoConnectionException ex) {
            notifyNoConnection();
        } catch (InternalServerError ex) {
            promptQueryAgain();
        } catch (BadLocationException ex) {
            notifyBadLocation();
        }

        showMarsData();
    }

    /**
     * clearCurrent takes the data on the Current tab and sets it to a neutral
     * text if errors occur
     *
     * @return void
     */
    private void clearCurrent() {
        currentLocation.setText("Location");
        temperatureHeader.setText("-----     ");
        lastUpdatedTimeLabel.setText("Updated: -----");
        skyStateIconC.setIcon(null);
        windSpeedField.setText("-----");
        windDirectionField.setText("N/E/S/W       ");
        airPressureField.setText("-----" + preferences.getPressureUnit());
        humidityField.setText("-----" + "%");
        skyConditionField.setText(" -----");
        maxTempHeader.setText("Max(High): " + "--");
        minTempHeader.setText("Min(Low):  " + "--");
        sunriseField.setText("-----");
        sunsetField.setText("-----");
    }

    /**
     * clearLongTerm takes the data on the Long Term tab and sets it to a
     * neutral text if errors occur
     *
     * @return void
     */
    private void clearLongTerm() {
        lastUpdatedTimeLabelLT.setText("Updated: -----");
        longTermDateOne.setText("Date");
        longTermDateTwo.setText("Date");
        longTermDateThree.setText("Date");
        longTermDateFour.setText("Date");
        longTermDateFive.setText("Date");

        // Main Temperature Updating
        longTermTempOne.setText("T:--");
        longTermTempTwo.setText("T:--");
        longTermTempThree.setText("T:--");
        longTermTempFour.setText("T:--");
        longTermTempFive.setText("T:--");

        // Maximum Temp Updating
        longTermTempHighOne.setText("H: -- ");
        longTermTempHighTwo.setText("H: -- ");
        longTermTempHighThree.setText("H: --");
        longTermTempHighFour.setText("H: --");
        longTermTempHighFive.setText("H: --");

        // Minimum Temp Updating
        longTermTempLowOne.setText("L: --");
        longTermTempLowTwo.setText("L: --");
        longTermTempLowThree.setText("L: --");
        longTermTempLowFour.setText("L: --");
        longTermTempLowFive.setText("L: --");

        longTermSkyStateOne.setIcon(null);
        longTermSkyStateTwo.setIcon(null);
        longTermSkyStateThree.setIcon(null);
        longTermSkyStateFour.setIcon(null);
        longTermSkyStateFive.setIcon(null);

        // Sky State Condition
        longTermConditionOne.setText("------");
        longTermConditionTwo.setText("------");
        longTermConditionThree.setText("------");
        longTermConditionFour.setText("------");
        longTermConditionFive.setText("------");

        currentLocationLT.setText("Location");
    }

    /**
     * clearShortTerm takes the data on the Short Term tab and sets it to a
     * neutral text if errors occur
     *
     * @return void
     */
    private void clearShortTerm() {

        temperatureLabelOne.setText("T: --");
        temperatureLabelTwo.setText("T: --");
        temperatureLabelThree.setText("T: --");
        temperatureLabelFour.setText("T: --");
        temperatureLabelFive.setText("T: --");
        temperatureLabelSix.setText("T: --");
        temperatureLabelSeven.setText("T: --");
        temperatureLabelEight.setText("T: --");

        conditionLabelOne.setText("------");
        conditionLabelTwo.setText("------");
        conditionLabelThree.setText("------");
        conditionLabelFour.setText("------");
        conditionLabelFive.setText("------");
        conditionLabelSix.setText("------");
        conditionLabelSeven.setText("------");
        conditionLabelEight.setText("------");

        skyStateOne.setIcon(null);
        skyStateTwo.setIcon(null);
        skyStateThree.setIcon(null);
        skyStateFour.setIcon(null);
        skyStateFive.setIcon(null);
        skyStateSix.setIcon(null);
        skyStateSeven.setIcon(null);
        skyStateEight.setIcon(null);

        shortTermTimeLabelOne.setText("Time");
        shortTermTimeLabelTwo.setText("Time");
        shortTermTimeLabelThree.setText("Time");
        shortTermTimeLabelFour.setText("Time");
        shortTermTimeLabelFive.setText("Time");
        shortTermTimeLabelSix.setText("Time");
        shortTermTimeLabelSeven.setText("Time");
        shortTermTimeLabelEight.setText("Time");

    }

    /**
     * initTabs sets the default labels and size of the tab options in the GUI
     * Sets the Rover icon image over the MARS tab
     *
     * @return void
     */
    private void initTabs() {
//        loadingGif.setVisible(false);

        JLabel currentTab = new JLabel("Current");
        currentTab.setPreferredSize(new Dimension(80, 40));
        guiTabbedPanels.setTabComponentAt(0, currentTab);

        JLabel shortTermTab = new JLabel("Short Term");
        shortTermTab.setPreferredSize(new Dimension(80, 40));
        guiTabbedPanels.setTabComponentAt(1, shortTermTab);

        JLabel longTermTab = new JLabel("Long Term");
        longTermTab.setPreferredSize(new Dimension(80, 40));
        guiTabbedPanels.setTabComponentAt(2, longTermTab);

        ImageIcon mars = new ImageIcon(GUIWindow.class.getResource("mars.png"));
        JLabel marsTab = new JLabel();
        marsTab.setIcon(mars);
        marsTab.setPreferredSize(new Dimension(80, 80));
        guiTabbedPanels.setTabComponentAt(3, marsTab);
    }

    /**
     * refreshApp will redraw ALL displays utilizes a flag to indicate if query
     * it's refreshing for is valid or not Pulls data from server.
     *
     * @return void
     */
    private void refreshApp() {
        if (isValid) // Data is valid
        {
            currentTime = new Time(System.currentTimeMillis());
            updateCurrentTab();
            updateShortTermTab();
            updateLongTermTab();
            updateMarsTab();
        } else // Data is invalid
        {
            notifyBadLocation();
        }
    }

    /**
     * refreshData is a helper function to update the text displays on their
     * respective tabs Units are recalculated based on user preferences.
     *
     * @return void
     */
    private void refreshData() {
        if (isValid) {
            refreshUnits();
            showShortTermData();
            showCurrentData();
            showLongTermData();
            updateMarsTab();
        }
    }

    /**
     * promptQueryAgain will ask the user to re-input data because the server
     * was unable to process the request
     *
     * @return void
     */
    private void promptQueryAgain() {
        locationTextField.setText("Server under load: request could not be processed.");
        invalidateData();
    }

    /**
     * notifyNoConnection will inform the user that the client was unable to
     * contact the server
     *
     * @return void
     */
    private void notifyNoConnection() {
        locationTextField.setText("Could not contact server. Please re-enter location.");
        invalidateData();
    }

    /**
     * notifyBadLocation will inform the user that their location is not found.
     *
     * @return void
     */
    private void notifyBadLocation() {
        locationTextField.setText("Invalid! Please Enter a New Location: i.e. \"London, Ca\" ");
        invalidateData();
    }

    /**
     * invalidateData will nullify the abiility of the refresh button to refresh
     * the display It sets the valid flag to false and prevents erroneous data
     * to be queried.
     *
     * @return void
     */
    private void invalidateData() {
        clearCurrent();
        clearShortTerm();
        clearLongTerm();
        isValid = false;
    }

    /**
     * refreshUnits() will be called when the user selects a different type of
     * unit from the preferences menu. Is responsible for converting the units
     * of ALL objects Will also be called when updateCurrentTab,
     * updateLongTermTab, updateShortTermTab are called- in order to display the
     * data.
     *
     * @return void
     */
    private void refreshUnits() {
        //updates long term forecast
        for (int i = 0; i < 5; i++) {
            Daily temp = weatherLT.getDaily(i);
            temp.setTempUnits();
            temp.setMinTempUnits();
            temp.setMaxTempUnits();
            weatherLT.setDaily(temp, i);
        }
        //updates short term forecast
        for (int i = 0; i < 8; i++) {
            Hourly temp = weatherST.getHourly(i);
            temp.setTempUnits();
            temp.setMinTempUnits();
            temp.setMaxTempUnits();
            temp.setWindUnits();
            weatherST.setHourly(temp, i);
        }
        //updates the mars forecast
        try {
            mars.setMinTempUnits();
            mars.setMaxTempUnits();
            mars.setWindUnits();
        } catch (java.lang.NullPointerException ex) {
            locationTextField.setText("MARS information could not be updated. Please try again.");

        }
        //updates current forecast
        currentObj.setTempUnits();
        currentObj.setMinTempUnits();
        currentObj.setMaxTempUnits();
        currentObj.setWindUnits();
    }

}
